---
AWSTemplateFormatVersion: "2010-09-09"
Description: Default EC2 stack for the ShakeShakeBurger Web Service

Parameters:
  ProjectName:
    Type: String
    Description: Project Name
  RegionName:
    Type: String
    Description: Region Name

Mappings:
  CidrMap:
    ap-northeast-2:
      VpcCidr: 10.1.0.0/16
    sa-east-1:
      VpcCidr: 172.17.0.0/16 
  AmiMap:
    ap-northeast-2:
      Ami: ami-07d737d4d8119ad79
    sa-east-1:
      Ami: ami-07a943af5a5ec252b

Resources:
#보안그룹 - web
  SeoulWebSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "${AWS::Region} Public Web Security Group"
      VpcId: !ImportValue VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key : Name
          Value : !Sub "${ProjectName}-${RegionName}-web-sg"
#보안그룹 - seoul-sg-natweb
  SeoulNatWebSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "${AWS::Region} Nat Web Instance Security Group"
      VpcId: !ImportValue VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.1.0.0/16
      Tags:
        - Key : Name
          Value : !Sub "${ProjectName}-${RegionName}-nat-web-sg"
#보안그룹 - seoul-alb-sg
  SeoulAlbSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "${AWS::Region} Nat Web Instance Security Group"
      VpcId: !ImportValue VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key : Name
          Value : !Sub "${ProjectName}-${RegionName}-alb-sg"

  #인스턴스 생성
  SeoulPubWeb:
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: !FindInMap [AmiMap, !Ref "AWS::Region", Ami]
      KeyName: "seoul-test"
      InstanceType: t2.micro
      SecurityGroupIds: 
        - !Ref SeoulWebSg
      SubnetId: !ImportValue SeoulPubSn2Id 
      Tags:
        - Key : Name
          Value : Seoul-Pub-Web
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sudo systemctl restart sshd
          sudo yum update
          sudo python3.7 -m pip install --upgrade pip
          sudo pip install Flask

  # 프라이빗 유저데이터에 파이선 설정&플라스크 설치하는거 넣기
  SeoulPriWeb3:
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: !FindInMap [AmiMap, !Ref "AWS::Region", Ami]
      InstanceType: t2.micro
      SecurityGroupIds: 
        - !Ref SeoulNatWebSg
      SubnetId: !ImportValue SeoulPriSn3Id 
      Tags:
        - Key : Name
          Value : Seoul-Pri-Web3
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sudo systemctl restart sshd
          sudo yum update
          sudo python3.7 -m pip install --upgrade pip
          sudo pip install Flask
  SeoulPriWeb4:
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: !FindInMap [AmiMap, !Ref "AWS::Region", Ami]
      InstanceType: t2.micro
      SecurityGroupIds: 
        - !Ref SeoulNatWebSg
      SubnetId: !ImportValue SeoulPriSn4Id 
      Tags:
        - Key : Name
          Value : Seoul-Pri-Web4
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sudo systemctl restart sshd
          sudo yum update
          sudo python3.7 -m pip install --upgrade pip
          sudo pip install Flask

#ALB 생성 : pri3,4
#alb tg
  SeoulAlbTg:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ProjectName}-alb-tg"
      Port: 80
      Protocol: HTTP
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      VpcId: !ImportValue VpcId
      TargetType: instance
      Targets:
        - Id: !Ref SeoulPriWeb3
        - Id: !Ref SeoulPriWeb4
      Tags:
        - Key : Name
          Value : !Sub "${ProjectName}-alb-tg"
#alb        
  SeoulAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      # internet-facing : 인터넷에 직접 노출되어 외부 트래픽을 받게 합니다.
      # Scheme: internet-facing 
      Scheme: internal
      Name: !Sub "${ProjectName}-alb"
      SecurityGroups:
        - !Ref SeoulAlbSg
      Subnets:
        - !ImportValue SeoulPriSn3Id
        - !ImportValue SeoulPriSn4Id
  SeoulAlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SeoulAlbTg
      LoadBalancerArn: !Ref SeoulAlb
      Port: 80
      Protocol: HTTP


...